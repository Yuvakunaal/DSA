1. Array :-
Definition: An array is a collection of elements, each identified by an index or a key. Arrays store elements in contiguous memory locations, making it easy to access elements using indices.
Characteristics:-
Fixed size (in most programming languages).
Homogeneous (all elements are of the same type).
Supports random access, meaning any element can be accessed directly using its index.

2. Stack :-
Definition:- A stack is a linear data structure that follows the Last In, First Out (LIFO) principle, meaning the last element added to the stack is the first one to be removed.
Characteristics:-
Operations : push (add an element), pop (remove an element), peek/top (view the top element).
No random access to elements (you can only access the top element).

3. Queue :-
Definition: A queue is a linear data structure that follows the First In, First Out (FIFO) principle, meaning the first element added is the first one to be removed.
Characteristics:-
Operations: enqueue (add an element), dequeue (remove an element), front/peek (view the front element).
Like stacks, queues do not support random access to elements.

4. Linked List :-
Definition: A linked list is a linear data structure where elements (called nodes) are stored in non-contiguous memory locations. Each node contains a data part and a reference (or link) to the next node in the sequence.
Types:-
Singly Linked List: Each node points to the next node, and the last node points to null.
Doubly Linked List: Each node points to both the next and previous nodes.
Circular Linked List: The last node points back to the first node, forming a circle.
Characteristics:-
Dynamic size (can grow or shrink as needed).
Efficient insertions and deletions compared to arrays.
No random access (you need to traverse the list to access elements).

5. Which is better array or linked list :-
Array is better when :-
You need fast access to elements via an index.
The size of the data is known and doesn't change frequently.
Memory needs to be efficiently managed with low overhead.

Linked List is better when :-
The number of elements is dynamic and can frequently change.
You require frequent insertions or deletions, especially at the beginning or end of the list.
You want to avoid the overhead of resizing arrays.


Sorting Algorithms :-
1. Merge Sort :-
Explanation: Merge Sort is a divide-and-conquer algorithm. It divides the input array into two halves, recursively sorts each half, and then merges the sorted halves to produce the final sorted array.
Steps:-
Divide the array into two halves.
Recursively sort each half.
Merge the two sorted halves into one sorted array.
Characteristics:-
Stable sort.

2. Quick Sort :-
Explanation: Quick Sort is another divide-and-conquer algorithm but with a different approach. It selects a "pivot" element and partitions the array so that elements less than the pivot are on the left, and elements greater than the pivot are on the right. It then recursively sorts the partitions.
Steps:-
Select a pivot element.
Partition the array around the pivot.
Recursively sort the sub-arrays on either side of the pivot.
Characteristics:-
Not stable (but can be made stable).

Searching Algorithms :-
1. Linear Search :-
Explanation: Linear Search is the simplest search algorithm. It sequentially checks each element of the array until it finds the target element or reaches the end of the array.
Characteristics:-
Time complexity: O(n).
No assumptions about the order of elements.
Works on both sorted and unsorted arrays.

2. Binary Search :-
Explanation: Binary Search is an efficient search algorithm that works on sorted arrays. It repeatedly divides the search interval in half. If the target value is less than the middle element, it searches the left half; otherwise, it searches the right half.
Characteristics:-
Time complexity: O(logn).
Requires a sorted array.
Much faster than linear search for large datasets.


Some questions :- (just refer)

# Finding odd or even without using operators :-
#include <iostream>
using namespace std;
int main() {
    int number;
    cout << "Enter a number: ";
    cin >> number;
    if (number & 1) {
        cout << number << " is odd." << endl;
    } else {
        cout << number << " is even." << endl;
    }
    return 0;
}

# Swap Two Numbers Without a Temporary Variable :-
#include <iostream>
using namespace std;
int main() {
    int a = 5, b = 10;
    a = a + b;  // a now becomes 15
    b = a - b;  // b becomes 5
    a = a - b;  // a becomes 10
    cout << "After swapping: a = " << a << ", b = " << b << endl;
    return 0;
}
